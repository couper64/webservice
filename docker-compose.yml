networks:
  webservice:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  pgadmin4_data:

services:

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - webservice
    restart: unless-stopped

  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: http://localhost/minio/dashboard # Without it Minio doesn't know how to render itself under a subpath.
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - webservice
    restart: unless-stopped

  redis:
    image: redis
    container_name: redis
    networks:
      - webservice
    restart: unless-stopped

  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin4_data:/var/lib/pgadmin
    ports:
      - "5000:80"
    networks:
      - webservice
    restart: unless-stopped

  fastapi:
    build:
      context: api
      dockerfile: Dockerfile.fastapi
    container_name: fastapi
    ports:
      - "8000:8000"
    networks:
      - webservice
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - minio
    command: >
      uvicorn api.main:api
      --host 0.0.0.0
      --port 8000
      --proxy-headers
      --forwarded-allow-ips '*'
      --root-path /api

  celery:
    build:
      context: worker
      dockerfile: Dockerfile.celery
    container_name: celery
    networks:
      - webservice
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
      - minio

  streamlit:
    build:
      context: webui
      dockerfile: Dockerfile.streamlit
    container_name: streamlit
    ports:
      - "8501:8501"  # Map container port 8501 to host
    environment:
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    networks:
      - webservice
    command: >
      streamlit run webui/app.py
      --server.address=0.0.0.0

  openresty:
    container_name: openresty
    build:
      context: proxy
      dockerfile: Dockerfile.openresty
    ports:
      - "80:80"
      - "443:443"
    networks:
      - webservice
    volumes:
      - ./proxy/ssl:/etc/ssl
      - ./proxy/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro
      - ./proxy/favicon.ico:/usr/local/openresty/nginx/html/favicon.ico:ro
      - ./proxy/lua:/etc/openresty/lua:ro
