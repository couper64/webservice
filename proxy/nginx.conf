worker_processes auto;

events {
    worker_connections 1024;
}

http {
    # Point to Docker’s built-in DNS (common in Docker Compose),
    # e.g. `no resolver defined to resolve "hubdb"`.
    resolver 127.0.0.11;

    # Set the limit to 1000MB (adjust as needed)
    client_max_body_size 1000M;

    # timeout settings
    proxy_connect_timeout   60s;   # time to connect to upstream
    proxy_send_timeout      60s;   # timeout for sending request to upstream
    proxy_read_timeout      60s;   # timeout for reading response from upstream
    send_timeout            60s;   # timeout for sending response to client

    # But $connection_upgrade is not a built-in variable — Nginx doesn’t define it automatically. You need to define it with a map block.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 80;

        location /pgadmin4 {
            proxy_set_header X-Script-Name /pgadmin4;
            proxy_pass http://pgadmin4:80/;
            proxy_set_header Host $host;
            proxy_redirect off;
        }

        location /api/ {

            # These variables are processed by Lua scripts.
            set $backend ""; # Initialize backend variable.
            set $subpath "/api/"; # Put the location without a slash.

            access_by_lua_file /etc/openresty/lua/forward.lua;
            rewrite ^/api(/.*)$ $1 break;  # Strip the prefix.
            proxy_set_header X-Script-Name /api/;

            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /minio/api/ {

            # These variables are processed by Lua scripts.
            set $backend ""; # Initialize backend variable.
            set $subpath "/minio/api/"; # Put the location without a slash.

            access_by_lua_file /etc/openresty/lua/forward.lua;
            rewrite ^/minio/api(/.*)$ $1 break;  # Strip the prefix.
            proxy_set_header X-Script-Name /minio/api/;

            proxy_pass http://$backend;
            proxy_set_header Host $backend; # This bit fixes signature mismatch by using Minio's Docker name instead of $host (localhost).
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Stream request directly to upstream (important for presigned PUTs)
            # Default behavior: Nginx buffers the entire request body in memory or disk first, then sends it to the upstream.
            proxy_request_buffering off;
            # Default behavior: Nginx buffers the response in memory/disk before sending it to the client.
            proxy_buffering off;
        }

        location /minio/dashboard/ {

            # These variables are processed by Lua scripts.
            set $backend ""; # Initialize backend variable.
            set $subpath "/minio/dashboard/"; # Put the location without a slash.

            # Access control: allow specific IPs and deny all others because the dashboard is not designed to be exposed to the internet.
            # allow 172.18.0.0/24;  # Allow access from the 192.168.1.0/24 subnet
            allow 172.18.0.1;       # Allow access from a specific IP address
            deny all;              # Deny access to all other IPs

            access_by_lua_file /etc/openresty/lua/forward.lua;
            rewrite ^/minio/dashboard(/.*)$ $1 break;  # Strip the prefix.
            proxy_set_header X-Script-Name /minio/dashboard/;

            proxy_pass http://$backend;
            proxy_set_header Host $backend; # This bit fixes signature mismatch by using Minio's Docker name instead of $host (localhost).
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Stream request directly to upstream (important for presigned PUTs)
            # Default behavior: Nginx buffers the entire request body in memory or disk first, then sends it to the upstream.
            proxy_request_buffering off;
            # Default behavior: Nginx buffers the response in memory/disk before sending it to the client.
            proxy_buffering off;

            # Required for WebSocket support.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /streamlit/ {

            # These variables are processed by Lua scripts.
            set $backend ""; # Initialize backend variable.
            set $subpath "/streamlit/"; # Put the location without a slash.

            access_by_lua_file /etc/openresty/lua/forward.lua;
            rewrite ^/streamlit(/.*)$ $1 break;  # Strip the prefix.
            proxy_set_header X-Script-Name /streamlit/;

            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Required for WebSocket support.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
}

stream {
    # This exposes postgres database to the internet.
    upstream postgres {
        server postgres:5432;
    }
    server {
        listen 5432 so_keepalive=on; # so_keepalive=on - this helps ensure that broken or dead client connections are detected and cleaned up by the kernel, improving resource handling and avoiding stale idle connections.
        proxy_pass postgres;
    }
}